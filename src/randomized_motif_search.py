__author__ = 'nikita_kartashov'

from random import seed, randrange

from greedy_motif_search import matrix_score
from greedy_motif_search_with_corrections import build_profile_columns_with_corrections
from profile_most_probable_kmer import most_probable_kmer
from utils.pyutils import fst


def random_kmer(string, k):
    i = randrange(len(string) - k + 1)
    return string[i: i + k]


def step_builder_with_best_motifs(dna_strings, k, best_motifs, profile_builder):
    profile = profile_builder(best_motifs)
    new_motifs = [most_probable_kmer(dna_string, k, profile) for dna_string in dna_strings]
    new_score = matrix_score(new_motifs)
    return new_motifs, new_score


def randomized_motif_search_wrapper(launches, dna_strings, k, profile_builder=build_profile_columns_with_corrections,
                                    step_builder=step_builder_with_best_motifs, n=None):
    seed()
    return min((randomized_motifs_search(dna_strings, k, profile_builder,
                                         step_builder, n) for i in range(launches)), key=matrix_score)


def randomized_motifs_search(dna_strings, k, profile_builder=build_profile_columns_with_corrections,
                             step_builder=step_builder_with_best_motifs, n=None):
    def build_initial_best_motifs():
        length = len(fst(dna_strings))

        def random_mapper(dna_string):
            i = randrange(length - k + 1)
            return dna_string[i: i + k]

        return list(map(random_mapper, dna_strings))

    best_motifs = build_initial_best_motifs()
    current_score = matrix_score(best_motifs)
    if n is None:
        while True:
            new_motifs, new_score = step_builder(dna_strings, k, best_motifs, profile_builder)
            if new_score < current_score:
                current_score = new_score
                best_motifs = new_motifs
            else:
                return best_motifs
    else:
        for i in range(n):
            new_motifs, new_score = step_builder(dna_strings, k, best_motifs, profile_builder)
            if new_score < current_score:
                current_score = new_score
                best_motifs = new_motifs
        return best_motifs


if __name__ == '__main__':
    DNA_STRINGS = """GGCCCGCTAAACGTCGTAGACGGACGAGGCTAAGGCCTGCGTTTGGCGTAGATTCCTATACATTACTAACGTCCACAGGATCGGCAGCGGCGATGTTCGGTCTTCGTAGCACGTGAGATATTGTGGGCTCACGCTTTCCATCGGCCTCACGGTAACCTAGGCCCGCTAAACGTC
GTAGACGGACGAGGCTAAGGCCTGCGTTTGGCGTAGATTCCTAACCTGTTGAATGGAATACATTACTAACGTCCACAGGATCGGCAGCGGCGATGTTCGGTCTTCGTAGCACGTGAGATATTGTGGGCTCACGCTTTCCATCGGCCTCACGGTAACCTAGGCCCGCTAAACGTC
AGGCCCCGCATCCAGGATAATAACAATGGAAATGGAGGGAGTCGCTCCCGTGCGAAATCCAGCTCTCCCTGACACATGTGTCTACATCTAGAAGTGGCAACATTGGCTTTGGGAATTTAAGGACGTTTGCGGAAATTGTGACCTAAACTTGGTACGTGCATGTCGGGTTACTTA
AGCTAAACACATTGTGAAACAATTTGAAGTTACCCGGCAGCGGATAGCATTAAAAAGTATGATTATGATCACAGGGAGCAGTCATCGACGATAGTAGGGAAAGGATGTTCCGATCAAGTTCCGTGCCCCTATCCGGGCTCCAATGACTATAGATGACTCTTATCGGAGCAATTG
CCTAGATTTCGACAGGCGTGAGAACTTCCGACGGCTTCTAAGACATTCTTACCAGGGATTGTGAATTTAGTCCGGGGGCGCTATGCACGCAATTTAGGTAAAAACAATTTGACCAGAGTTTGTATAGCACTAGCGTGAACTCTTTCGCCATCTTATCCTTACTGGCATCGGCGA
GCACACTCGCCAGTACGAAGCGCGTGTCGTTTTGTGGTCCCATCTGTCTTGGAACAATGTCACTCTATCAAAAGTCCATTATTTCGGTCTCCGGACGAATCGCGGCCCTATGAGGAACAAAGGGAATGGAACGGTTTCCACGTATTACACCTAGCTCGCCTAACGTCGAGGTGC
AGTGCACAGAACAACAAAGTCGTGTAGGCGCTAGAAATGGTGCGCCGTAACATGTGAGCCGAGCCATATCTGTAGCGTCCAAGGTATGTCTCTCAAATCGTGTAAACAATGATAATGGAAATTGGCTTAGCTAATCGGGACAATGTGTCTCTTTGACGCAGTGCGTGGGGATAG
CAGTTTTGACAAGGTCGTCGAATGCTGACACAACCCTCTCTGGCAGCTTCCTTTCGCACAATTTGAATGACATACTTCTCAGTGATGCAGTCCCCTAAACAGAACCAACGGCGGTAGATGATCTAAGCGAGTGCTAATCATCGACGCTATCTGCGAAATCGCCGAGCGGTGAGC
ACCTTGTACGAACCCTAATGGGAGACCATCTCTGACAATCGAGTAGCCTGCGCTACCGGGCGTAAGGAAATCCCTTTCTTAGTGAAGAAGTGCCATGTGCGGGAAGTCGTTCGAAATTTAACAATTGCGATGGAACACATGCCTGTTTATGTACAGAGTCTGGTCGTTGAAAAG
GTCTACTTACGAGGTAGCCCCCATATACCAACGCTCGGGCCTCTAGGGCAGGACTGATCCGGACAAGGCGCCCCTGGCAGACTCAACAATTTGCGAGGAAGATAAGCCGGCAAGATCATTACAATCGAAGACGTCGGCTATAAGACCCCGTTGTTGCGGGTAAAACTTCGCCCA
CGCTAGCGCAACCCCTACAATCATATTACCAATGCTCATCGAACGGGTAGTGAGGGCAGGTATTTGAATGGACGTACGCCGTGGCTAGCAATTTATTATTCAAGGGGACAGGGAACACGACCTTATTGCGGGTCAAGCCTAGGGACAGTAACGTGTTTGGATGGTGACGCAAGG
TTCCGCCGACTGCCTCATCACACCTAAAAACAGAATGAATGGATGTGCCACGGTCTCCGAGTCGATTGAGACTTCGCATGAATACCCCATTACCAAGTGAGAAAGTAAAATCGGACACAGGGAAGTATCGGCGCGTGCAGTACATCGGCCAGGAACTATGGCTCGTGTTATTAG
GATCTACAGTACCCAAGCACTTCTAAGCACCACTGGTGAGATCCGCTACCATGGGTGCCCTTTCACATTGGCCCGTCGTGTGGTGCAGTCGGAAGTGGCCTCCAATGTAACAGATTTGGTTGTCTTTTGGCAAGCGTATATCGTCAACAAGGAGAATGGACCTTTTTCTCACCG
CTCTGTTGCACGGCGCCAGCGACCTGCTTTGAGTCCACATGTTTGGTCCTGTGTTTAAAGTGTTCCTATAGATGTACTTGATCACCGCAATTTGAATGGCTCTGTCCTGCGCTGGGGGCCCCCAGCCGACTGGAACCAGTAGTCTTGCGAGTTAACGCGGTCGACTATGGATCC
TCCCTAGTCGGTATCTCATTACAGCCCGGAGCTTAACTGCCTAGCTCTGTTAAGTAGATCGCATATAGATTCTGTCGGGAGCGTAGAAGGTAAAAACGTTTGAATGGAGATTAGGGCGACCTTCTAAGCGAATTACCTGAGTGGCCGCAGACCCGCGCTAGTCCTCCGCTGACT
GGAAGTCCCCTTATGTGCCGATATTTGTAAACGAGATAATTCGGCCCGTCTCACGTAGAGTCTCCGAGTAAACATCCTGAATGGACGACGACATACGAATTATCGAGATTGTTCTGTTCTTTTCAGGACTTTCCGCAAGGCGACACCACGGATCGCAGCACGATGCGAAGATGC
GCGGGTCTGCTGAAGGTTGGGTAAACCCCCTGGTCGTACTCATACTAACCGAAGTTACAAACTACCAATATGCGCCTGTAGTGCATCGAACTGGGGGATAGCGGTGATAAGATATTGTGTCCCTCTTGTAGCGGCTTTCTTTCGAATTTGAATGGAGGATTGAGCAGATCATTT
GGAGAGTAGTCCGCGCGCCTCCTGTTCGGACTTATGCTGCAGATATTGTGGGTCCAAGAGCCTCCATCCACTCGGCGCGAAGCGGCTGCACGAAGTTCGGGCTCTGCGCAAGGGAGTACGGAAAATCCGAGATAGCCGAGAACCTCTTGAATGGATGGCATAGCAAGCCCTCCA
TAACGGCTAGATCAGGGCTCCACCGCTCCTCGTTTAGGTCATGATCCATACCACCTTCTCCTCGCTTATGTGCACGCTCTCTCGCACCCGGGGGCTATTGCCACGGTGAAATACGCCTCGATCTGAACAATTTCTGTGGAACCTAAAAGCGGACCCCAGTGCCTACGGTAGGGA
CCACAGAGCGGTTATGTCTATGGAAGGCAGTAGAGCGTCACTCGCTCGGACCGAACACGTCATCGAATGTTCTTTGGCGTACCTTTGATTATAGAAGACCAGCTAACCTATCTGCATCACTGCCAAGCTGACGAGTCAACAATTTGAATCCTGATGTTCACCGGGTCATCGTAC""".split()
    K = 15
    LAUNCHES = 1000
    print('\n'.join(randomized_motif_search_wrapper(LAUNCHES, DNA_STRINGS, K)))




